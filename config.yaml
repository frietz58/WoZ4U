pepper_ips:  # Entry in dropdown menu will be create for every list item
  - 192.168.100.166


camera_save_dir: record_imgs  # relative folder on host machine, images form camera feed will be saved here
audio_save_dir: /home/nao/ # absolute path on pepper robot, you'll have scp or place audio files there yourself


# LOCK INTERFACE
# If you don't want all sections to be accessible, you can lock them, in which case they will be disabled for all input
# Can be useful if you don't fully trust the wizard and or when you just want to make sure not to mess with some settings
# on accident.
# Set 'true' and 'false' (JavaScript) as value, not Pythons True or False...
lock_autonomous_life_section: "false"
lock_movement_control_section: "false"
lock_tablet_section: "false"
lock_anim_speech_section_1: "false"
lock_anim_speech_section_2: "false"
lock_anim_speech_section_3: "false"
lock_anim_speech_section_4: "false"
lock_volume_section: "false"
lock_audio_section: "false"
lock_gesture_section: "false"
lock_color_section: "false"
lock_eye_anim_section: "false"


# AUTONOMOUS LIFE SETTINGS
# Leave as empty string to leave value as is on connection to robot
# values must be valid for respective set methods in naoqi API...
autonomous_life_config:
  autonomous_state: "solitary"
  tangential_collision: ""
  orthogonal_collision: ""
  blinking: False  # can interfere with manual eye control...
  basic_awareness: False  # gets enabled by default if pepper enters solitary or interactive state...
  engagement_mode: ""
  head_breathing: False  # I would advise always having this disabled, conflicts with manual head control...
  arms_breathing: True
  body_breathing: True
  legs_breathing: True
  listening_movement: False
  speaking_movement: True

default_head_turn_deg: 20 # head turn increment
default_turn_deg: 90  # turn increment
default_drive_dist : 10  # move increment

# ALL CONCRETE ACTIONS (BUTTONS IN THE UI) CAN GET THE "key_comb" FIELD.
# PROVIDING A LIST WILL BIND THE KEYS IN THAT LAST TO THE CONCRETE ACTION TO EXECUTE
# SPECIAL KEYS CAN BE: "ctrl", "shift", "alt" etc, full list here: https://craig.is/killing/mice#keys
# example flag: key_comb: ["ctrl", "1"]  <-- Binds Control + 1 keyboard shortcut to an action
# ARROW KEY MAY NOT BE USED, AS THEY ARE ALREADY IN USE TO DRIVE PEPPER AND CONTROL THE HEAD AND HIP!!

tablet_root_location: static/tablet_items/  # place image or video files here, on host machine
tablet_items:
  -
    title: Abstract
    file_name: abstract.png
    key_comb: [ "ctrl", "shift", 1 ]  # example for more complex shortcut

  -
    title: Kubist
    file_name: kubist.png
    key_comb: [ "ctrl", "shift", 2 ]  # example for more complex shortcut

  -
    title: Van Gogh
    file_name: vanGogh.png
    key_comb: [ "ctrl", "shift", 3 ]  # example for more complex shortcut

  -
    title: Impressionist
    file_name: impressionist.png
    key_comb: [ "ctrl", "shift", 4 ]  # example for more complex shortcut

  -
    title: Renaissance
    file_name: renaissance.png
    key_comb: [ "ctrl", "shift", 5 ]  # example for more complex shortcut

  -
    title: Spotify  # We can also show a website on Pepper's tablet
    file_name: https://open.spotify.com/playlist/37i9dQZF1DWV7EzJMK2FUI?si=e39a61da55a54114 # Also just put URL to website here
    key_comb: ["ctrl", "shift", 8]


initiate_conversation:
    # Avoid special characters in messages, this can break the backend.
    # EG: Instead if a ', put &apos; into the message, which is the HTML symbol for the apostroph
  -
    title: Hi! Do you wanna paint  # This will be shown in the GUI
    string: "Hi there! I'm PaintPal. It is such a nice day today. Do you want to paint?"  # message pepper will say
    tooltip: "Plain message without annotations"  # tooltip for the button in UI
    key_comb: ["ctrl", "q"]  # keyboard shortcut for this action

  -
    title: If No to paint
    string: "That's too bad. are you sure? We could make something to show your loved ones when they visit."
    tooltip: "Plain message without annotations"
    key_comb: [ "ctrl", "w" ]  # keyboard shortcut for this action

  -
    title: If still no to paint
    string: "Alright, take care. I'm here if you need me."
    tooltip: "Plain message without annotations"
    key_comb: [ "ctrl", "e" ]  # keyboard shortcut for this action

  -
    title: If Yes to paint
    string: "Do you want to draw with a pencil or use water colors?"
    tooltip: "Plain message without annotations"
    key_comb: [ "ctrl", "r" ]  # keyboard shortcut for this action

  -
    title: If no options
    string: "Sorry we only have these two mediums to paint now."
    tooltip: "Plain message without annotations"
    key_comb: [ "ctrl", "t" ]  # keyboard shortcut for this action

  -
    title: if available - no watercolor
    string: "Do you have the drawing tools in front of you?"
    tooltip: "Plain message without annotations"
    key_comb: [ "ctrl", "y" ]  # keyboard shortcut for this action

  -
    title: if available - watercolor
    string: "Do you have the drawing tools and colors in front of you?"
    tooltip: "Plain message without annotations"
    key_comb: [ "ctrl", "u" ]  # keyboard shortcut for this action

  -
    title: now available - no watercolor
    string: "You should have a paper and a pencil."
    tooltip: "Plain message without annotations"
    key_comb: [ "ctrl", "i" ]  # keyboard shortcut for this action

  -
    title: now available - watercolor
    string: "You should have a paper, a paint brush, some colors and water."
    tooltip: "Plain message without annotations"
    key_comb: [ "ctrl", "o" ]  # keyboard shortcut for this action

  -
    title: if unavailable
    string: "Let me have the caretaker bring it for you."
    tooltip: "Plain message without annotations"
    key_comb: [ "ctrl", "p" ]  # keyboard shortcut for this action

  -
    title: ready
    string: "Now that we have everything ready, lets decide on what we want to paint today."
    tooltip: "Plain message without annotations"
    key_comb: [ "ctrl", "a" ]  # keyboard shortcut for this action


painting_style:
    # Avoid special characters in messages, this can break the backend.
    # EG: Instead if a ', put &apos; into the message, which is the HTML symbol for the apostroph
  -
    title: Ask style  # This will be shown in the GUI
    string: "Do you already have an art style in mind? Or would you like some suggestions?"  # message pepper will say
    tooltip: "Plain message without annotations"  # tooltip for the button in UI
    key_comb: ["ctrl", "s"]  # keyboard shortcut for this action

  -
    title: Ask Abstract
    string: "Do you want to try the Abstract style?"
    tooltip: "Plain message without annotations"
    key_comb: [ "ctrl", "d" ]  # keyboard shortcut for this action

  -
    title: Show Abstract
    string: "Here is an example of abstract modern style of painting.Abstract art is art that does not attempt to represent an accurate depiction of a visual reality but instead use shapes, colours, forms and gestural marks to achieve its effect. Here is an example."
    tooltip: "Plain message without annotations"
    key_comb: [ "ctrl", "f" ]  # keyboard shortcut for this action

  -
    title: Ask Kubist
    string: "Do you want to try the Kubist style?"
    tooltip: "Plain message without annotations"
    key_comb: [ "ctrl", "g" ]  # keyboard shortcut for this action

  -
    title: Show Kubist
    string: "Cubism is a style of art that emerged in the early 20th century and is characterized by the use of geometric shapes, fragmented forms, and multiple viewpoints to create a complex and abstract image. Here is an example."
    tooltip: "Plain message without annotations"
    key_comb: [ "ctrl", "h" ]  # keyboard shortcut for this action

  -
    title: Ask Van Gogh
    string: "Do you want to try the Van Gogh style?"
    tooltip: "Plain message without annotations"
    key_comb: [ "ctrl", "j" ]  # keyboard shortcut for this action

  -
    title: Show Van Gogh
    string: "Van Gogh style of painting involves bold, dramatic brush strokes which expressed emotion. Here is an example."
    tooltip: "Plain message without annotations"
    key_comb: [ "ctrl", "k" ]  # keyboard shortcut for this action

  -
    title: Ask Impressionist
    string: "Do you want to try the Impressionist style?"
    tooltip: "Plain message without annotations"
    key_comb: [ "ctrl", "l" ]  # keyboard shortcut for this action

  -
    title: Show Impressionist
    string: "The characterizations of the style include small, visible brushstrokes that offer the bare impression of form, unblended color and an emphasis on the accurate depiction of natural light. Here is an example."
    tooltip: "Plain message without annotations"
    key_comb: [ "ctrl", "z" ]  # keyboard shortcut for this action

  -
    title: Ask Renaissance
    string: "Do you want to try the Abstract style?"
    tooltip: "Plain message without annotations"
    key_comb: [ "ctrl", "x" ]  # keyboard shortcut for this action

  -
    title: Show Renaissance
    string: "The Characteristics of the Renaissance include a renewed interest in classical antiquity."
    tooltip: "Plain message without annotations"
    key_comb: [ "ctrl", "c" ]  # keyboard shortcut for this action

  -
    title: wanna pick?
    string: "Do you want to pick this style?"
    tooltip: "Plain message without annotations"
    key_comb: [ "ctrl", "v" ]  # keyboard shortcut for this action

  -
    title: sorry-no answer
    string: "I'm sorry I dont know the answer to this."
    tooltip: "Plain message without annotations"
    key_comb: [ "ctrl", "b" ]  # keyboard shortcut for this action

  -
    title: sorry-no answer2
    string: "Thats a really good question, but I dont know the answer to this right now."
    tooltip: "Plain message without annotations"
    key_comb: [ "ctrl", "n" ]  # keyboard shortcut for this action

  -
    title: okay sure
    string: "Okay sure!"
    tooltip: "Plain message without annotations"
    key_comb: [ "ctrl", "m" ]  # keyboard shortcut for this action

painting_session:
    # Avoid special characters in messages, this can break the backend.
    # EG: Instead if a ', put &apos; into the message, which is the HTML symbol for the apostroph
  -
    title: Painting Session  # This will be shown in the GUI
    string: "This is just a simple message, no animations, no tags or annotations added."  # message pepper will say
    tooltip: "Plain message without annotations"  # tooltip for the button in UI
    key_comb: ["ctrl", "3"]  # keyboard shortcut for this action



volume: 0.5  # range: [0.0 - 1.0], default = 1
voice_speed: 100  # range [50 - 400], default = 100
voice_pitch: 1 # range [1.0 - 4.0], default = 1, 0 disables effect

audio_files:
  # These have to be stored directly on the Pepper, it's the only way properly supported by the naoqi API :/
  # Check the README.md under section 'adding audio files'
  # A Button will be created for every item in the list
  -
    title: White Music Playlist  # This will be shown in the GUI
    location: /home/nao/sound_files/ImperialMarch60.wav  # absolute path on the Pepper
    key_comb: ["alt", "1"]

gestures: # Buttons will be created for every item in the list
  -
    title: "Yes"  # This will be shown in the GUI
    gesture: "animations/Stand/Gestures/Yes_1"  # Gesture to execute
    tooltip: "Yes_1 gesture"  # Tooltip for buton
    key_comb: ["shift", "1"]
  -
    title: "No"
    gesture: "animations/Stand/Gestures/No_1"
    tooltip: "No_1 gesture"
    key_comb: ["shift", "2"]
  -
    title: "Wave"
    gesture: "animations/Stand/Gestures/Hey_3"
    tooltip: "Hey_3 gesture"
    key_comb: ["shift", "3"]
  -
    title: "Me"
    gesture: "animations/Stand/Gestures/Me_1"
    tooltip: "Me_1 gesture"
    key_comb: ["shift", "4"]
  -
    title: "You"
    gesture: "animations/Stand/Gestures/You_1"
    tooltip: "You_1 gesture"
    key_comb: ["shift", "5"]
  -
    title: "Embarrassed"
    gesture: "animations/Stand/Emotions/Neutral/Embarrassed_1"
    tooltip: "Embarrassed_1 gesture"
    key_comb: ["shift", "6"]

  -
    title: "Happy"
    gesture: "animations/Stand/Emotions/Positive/Happy_4"
    tooltip: "blah"
    key_comb: ["shift", "7"]

colors:
  # Color values for eye leds that should be accessable from the interface
  # one color may have the 'is_default: true' flag, which will then be set as color for the eye leds once interface connects to robot
  # Values will be rounded to two decimals places...
  -
    title: Red  # will be shown in UI, alongside small box that takes given RGB value
    red: 1.0
    green: 0
    blue: 0
    key_comb: ["c", "r"]
  -
    title: Yellow
    red: 1.0
    green: 1.0
    blue: 0
    key_comb: ["c", "y"]
  -
    title: Orange
    red: 1.0
    green: 0.7
    blue: 0
    key_comb: ["c", "o"]
  -
    title: Green
    red: 0
    green: 1.0
    blue: 0
    key_comb: ["c", "g"]
    is_default: True  # default color will be set on connect
  -
    title: Aqua
    red: 0
    green: 1.0
    blue: 1.0
    key_comb: ["c", "a"]
  -
    title: Blue
    red: 0
    green: 0
    blue: 1.0
    key_comb: ["c", "b"]
  -
    title: Magenta
    red: 1.0
    green: 0
    blue: 1.0
    key_comb: ["c", "m"]
  -
    title: White
    red: 1.0
    green: 1.0
    blue: 1.0
    key_comb: ["c", "w"]

# Eye animation configuration
# these are further configurable, because there are only those three animations available
rasta_anim:
  duration: 3
  key_comb: ["ctrl", "alt", 1]

random_anim:
  duration: 6
  key_comb: ["ctrl", "alt", 2]

rotate_anim:
  duration: 4
  key_comb: ["ctrl", "alt", 3]
