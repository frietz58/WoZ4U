pepper_ips:  # Entry in dropdown menu will be create for every list item
  - 192.168.100.166


camera_save_dir: record_imgs  # relative folder on host machine, images form camera feed will be saved here
audio_save_dir: /home/nao/ # absolute path on pepper robot, you'll have scp or place audio files there yourself


# LOCK INTERFACE
# If you don't want all sections to be accessible, you can lock them, in which case they will be disabled for all input
# Can be useful if you don't fully trust the wizard and or when you just want to make sure not to mess with some settings
# on accident.
# Set 'true' and 'false' (JavaScript) as value, not Pythons True or False...
lock_autonomous_life_section: "false"
lock_movement_control_section: "false"
lock_tablet_section: "false"
lock_anim_speech_section: "false"
lock_volume_section: "false"
lock_audio_section: "false"
lock_gesture_section: "false"
lock_color_section: "false"
lock_eye_anim_section: "false"


# AUTONOMOUS LIFE SETTINGS
# Leave as empty string to leave value as is on connection to robot
# values must be valid for respective set methods in naoqi API...
autonomous_life_config:
  autonomous_state: "solitary"
  tangential_collision: ""
  orthogonal_collision: ""
  blinking: False  # can interfere with manual eye control...
  basic_awareness: False  # gets enabled by default if pepper enters solitary or interactive state...
  engagement_mode: ""
  head_breathing: False  # I would advise always having this disabled, conflicts with manual head control...
  arms_breathing: True
  body_breathing: True
  legs_breathing: True
  listening_movement: False
  speaking_movement: True

default_head_turn_deg: 20 # head turn increment
default_turn_deg: 90  # turn increment
default_drive_dist : 10  # move increment

# ALL CONCRETE ACTIONS (BUTTONS IN THE UI) CAN GET THE "key_comb" FIELD.
# PROVIDING A LIST WILL BIND THE KEYS IN THAT LAST TO THE CONCRETE ACTION TO EXECUTE
# SPECIAL KEYS CAN BE: "ctrl", "shift", "alt" etc, full list here: https://craig.is/killing/mice#keys
# example flag: key_comb: ["ctrl", "1"]  <-- Binds Control + 1 keyboard shortcut to an action
# ARROW KEY MAY NOT BE USED, AS THEY ARE ALREADY IN USE TO DRIVE PEPPER AND CONTROL THE HEAD AND HIP!!

tablet_root_location: static/tablet_items/  # place image or video files here, on host machine
tablet_items:

animated_speech:
    # Avoid special characters in messages, this can break the backend.
    # EG: Instead if a ', put &apos; into the message, which is the HTML symbol for the apostroph
  -
    title: Plain  # This will be shown in the GUI
    string: "This is just a simple message, no animations, no tags or annotations added."  # message pepper will say
    tooltip: "Plain message without annotations"  # tooltip for the button in UI
    key_comb: ["ctrl", "9"]  # keyboard shortcut for this action
  - 
    title: Pitch annotation
    string: "This is a message where we \\vct=150\\ change the pitch halfway through."
    tooltip: "Voice pitch annotated change"
    key_comb: ["ctrl", "2"]
  -
    title: Speed annotation
    string: "This is a message where we \\rspd=50\\ change the speed halfway through."
    tooltip: "Voice speed annotated change"
    key_comb: ["ctrl", "3"]
  -
    title: Speech and animation
    string: "Hello there! ^start(animations/Stand/Gestures/Hey_1) I am over here. ^wait(animations/Stand/Gestures/Hey_1)"
    tooltip: "Hello there! ^start(animations/Stand/Gestures/Hey_1) I am over here. ^wait(animations/Stand/Gestures/Hey_1)"
    key_comb: ["ctrl", "4"]
  -
    title: Suspended speech
    string: "Look at me! ^run(animations/Stand/Gestures/ShowSky_8) I am this tall!"
    tooltip: "Look at me! ^run(animations/Stand/Gestures/ShowSky_8) I am this tall!"
    key_comb: ["ctrl", "5"]
  -
    title: Show tablet
    string: "^start(animations/Stand/Gestures/ShowTablet_3) Look at my tablet. ^wait(animations/Stand/Gestures/ShowTablet_3)"
    tooltip: "^start(animations/Stand/Gestures/ShowTablet_3) Look at my tablet. ^wait(animations/Stand/Gestures/ShowTablet_3)"
    key_comb: ["ctrl", "6"]
  -
    title: Long sequence
    string: "^start(animations/Stand/Gestures/Hey_1) Look over here. ^wait(animations/Stand/Gestures/Hey_1) I think ^start(animations/Stand/Waiting/ShowSky_1) there is a plane in the sky! ^wait(animations/Stand/Waiting/ShowSky_1)"
    tooltip: "^start(animations/Stand/Gestures/ShowTablet_3) Look over here. ^wait(animations/Stand/Gestures/ShowTablet_3)"
    key_comb: ["ctrl", "7"]
  -
    title: Peter Rabit
    string: "static/tale_of_peter_rabit.txt"
    tooltip: "The tale of Peter rabit"
    key_comb: ["ctrl", "8"]


volume: 0.5  # range: [0.0 - 1.0], default = 1
voice_speed: 100  # range [50 - 400], default = 100
voice_pitch: 1 # range [1.0 - 4.0], default = 1, 0 disables effect

audio_files:
  # These have to be stored directly on the Pepper, it's the only way properly supported by the naoqi API :/
  # Check the README.md under section 'adding audio files'
  # A Button will be created for every item in the list
  -
    title: White Music Playlist  # This will be shown in the GUI
    location: /home/nao/sound_files/ImperialMarch60.wav  # absolute path on the Pepper
    key_comb: ["alt", "1"]

gestures: # Buttons will be created for every item in the list
  -
    title: "Yes"  # This will be shown in the GUI
    gesture: "animations/Stand/Gestures/Yes_1"  # Gesture to execute
    tooltip: "Yes_1 gesture"  # Tooltip for buton
    key_comb: ["shift", "1"]
  -
    title: "No"
    gesture: "animations/Stand/Gestures/No_1"
    tooltip: "No_1 gesture"
    key_comb: ["shift", "2"]
  -
    title: "Wave"
    gesture: "animations/Stand/Gestures/Hey_3"
    tooltip: "Hey_3 gesture"
    key_comb: ["shift", "3"]
  -
    title: "Me"
    gesture: "animations/Stand/Gestures/Me_1"
    tooltip: "Me_1 gesture"
    key_comb: ["shift", "4"]
  -
    title: "You"
    gesture: "animations/Stand/Gestures/You_1"
    tooltip: "You_1 gesture"
    key_comb: ["shift", "5"]
  -
    title: "Embarrassed"
    gesture: "animations/Stand/Emotions/Neutral/Embarrassed_1"
    tooltip: "Embarrassed_1 gesture"
    key_comb: ["shift", "6"]

  -
    title: "Happy"
    gesture: "animations/Stand/Emotions/Positive/Happy_4"
    tooltip: "blah"
    key_comb: ["shift", "7"]

colors:
  # Color values for eye leds that should be accessable from the interface
  # one color may have the 'is_default: true' flag, which will then be set as color for the eye leds once interface connects to robot
  # Values will be rounded to two decimals places...
  -
    title: Red  # will be shown in UI, alongside small box that takes given RGB value
    red: 1.0
    green: 0
    blue: 0
    key_comb: ["c", "r"]
  -
    title: Yellow
    red: 1.0
    green: 1.0
    blue: 0
    key_comb: ["c", "y"]
  -
    title: Orange
    red: 1.0
    green: 0.7
    blue: 0
    key_comb: ["c", "o"]
  -
    title: Green
    red: 0
    green: 1.0
    blue: 0
    key_comb: ["c", "g"]
    is_default: True  # default color will be set on connect
  -
    title: Aqua
    red: 0
    green: 1.0
    blue: 1.0
    key_comb: ["c", "a"]
  -
    title: Blue
    red: 0
    green: 0
    blue: 1.0
    key_comb: ["c", "b"]
  -
    title: Magenta
    red: 1.0
    green: 0
    blue: 1.0
    key_comb: ["c", "m"]
  -
    title: White
    red: 1.0
    green: 1.0
    blue: 1.0
    key_comb: ["c", "w"]

# Eye animation configuration
# these are further configurable, because there are only those three animations available
rasta_anim:
  duration: 3
  key_comb: ["ctrl", "alt", 1]

random_anim:
  duration: 6
  key_comb: ["ctrl", "alt", 2]

rotate_anim:
  duration: 4
  key_comb: ["ctrl", "alt", 3]
